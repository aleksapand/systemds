#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("nn/layers/sigmoid.dml") as sigmoid
source("nn/layers/leaky_relu.dml") as lrelu
source("nn/layers/relu.dml") as relu
source("nn/layers/tanh.dml") as tanh
source("nn/layers/softmax.dml") as softmax
source("nn/layers/affine.dml") as affine

source("nn/layers/l1_loss.dml") as l1_loss
source("nn/layers/l2_loss.dml") as l2_loss
source("nn/layers/log_loss.dml") as log_loss
source("nn/layers/logcosh_loss.dml") as logcosh_loss
source("nn/layers/feedForward.dml") as ff_pass

source("nn/layers/dropout.dml") as dropout
source("nn/optim/sgd.dml") as sgd
source("nn/layers/cross_entropy_loss.dml") as cross_entropy_loss
source("nn/optim/sgd_nesterov.dml") as sgd_nesterov



# paths to dataset and output file
path = $1
out_path = $2

data = read(path, format="csv")
x_train = data[,1:6]
y_train = data[, 7]

# Train the model on synthetic dataset for binary classification generated by scikit-learn
model = ffTrain(x_train, y_train, 128, 10, 0.001, "sigmoid", "cel", FALSE, 2, "ASP", "EPOCH", "LOCAL", -1, TRUE)
# Make predictions on the training set to test the model's capability of learning
prediction = ffPredict(model, x_train)

# Threshold output of softmax
for(i in 1:nrow(prediction)) {
    if(as.scalar(prediction[i]) >= 0.5) {
        prediction[i] = 1
    } else {
        prediction[i] = 0
    }
}

# Count the number of correct predictions
sum = 0
for (e in 1:nrow(y_train)) {
    if (as.scalar(prediction[e]) == as.scalar(y_train[e])) {
        sum = sum + 1
    }
}
acc = sum / nrow(y_train)
write(acc, out_path)
