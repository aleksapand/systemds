#######################################################
source("nn/layers/sigmoid.dml") as sigmoid
source("nn/layers/leaky_relu.dml") as lrelu
source("nn/layers/relu.dml") as relu
source("nn/layers/tanh.dml") as tanh
source("nn/layers/softmax.dml") as softmax
source("nn/layers/affine.dml") as affine

source("nn/layers/l1_loss.dml") as l1_loss
source("nn/layers/l2_loss.dml") as l2_loss
source("nn/layers/log_loss.dml") as log_loss
source("nn/layers/logcosh_loss.dml") as logcosh_loss
source("nn/layers/affineForwardPass.dml") as ff_pass
#source("nn/layers/affine.dml") as affine
#[a, b] = affine::init(5,5, 1)

#a = sigmoid(5.5)
#[a, b] = affine(5, 5, -1)
#print(toString(a))

#f = as.frame(a)
#print(toString(f))
#print(toString(a))
#print(b)

#c = [5, "str"]
#print(as.scalar(c[1]))
#print(c[2])

s = as.frame("str")
s = cbind(s, as.frame("str2"))
#print(toString(s[1,1]))

lista = list(1, "alk")
lista = append(lista, "too mi treba")
#lista2 = list(b, "neka funk")
#lista = append(lista, lista2)
#print(length(lista))
#print(toString(lista[5]))

#aff = list(mat=a, funk = "a")
#aff['funk'] = "relu"
#print(toString(aff['funk']))

layers = list()

for(i in 1:2) {
    [W, b] = affine::init(4-i, 2, -1)
    layers = append(layers, W)
    layers = append(layers, b)
    layers = append(layers, "relu")
}

X = matrix(0, rows=5, cols=3)
Y = matrix(0, rows=3, cols=3)

ffTrain(X, Y, layers, "l2")

# layers = list()
# layer1 = list(3, 2, "sigmoid", -1)
# layers = append(layers, layer1)
# layer2 = list(2, 5, "sigmoid", -1)
# layers = append(layers, layer2)

# print(toString(layers))

###########################

